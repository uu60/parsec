//
// Created by 杜建璋 on 2024/7/7.
//

#ifndef MPC_PACKAGE_SECUREEXECUTOR_H
#define MPC_PACKAGE_SECUREEXECUTOR_H

#include <cstdint>
#include <atomic>
#include <string>
#include <cmath>
#include "../utils/System.h"
#include "../conf/Conf.h"

class AbstractSecureExecutor {
public:
    static constexpr int NO_CLIENT_COMPUTE = -1;
    // bit width
    int _width{};

protected:
    /*
     * Whole tag for each message:
     * +-----------------+----------- 32 bits ----------------------------+
     * |task tag (8 bits)|               message tag (24 bits)            |
     * +-----------------+------------------------------------------------+
     * Object tag should be generated by a static method in each class.
     * Message tag should be generated by each executor object.
     *
     * By this design, different executor object can run in parallel.
     * However, when objects run in parallel, specific object tag should be assigned in certain sequence.
     * Tag assignment process must NOT be executed in parallel in case wrong sequence of generation.
     *
     * MPC system should record a static number (atomic int may be needed) of created objects
     * in case that the assigned object tags conflict. (This Package is not responsible for conflict control)
     */
    // object tag
    int _taskTag{};
    // message tag
    int _startMsgTag{};
    std::atomic_int _currentMsgTag{};

public:
    /**
     * Executors' constructor should be responsible for data preparation.
     */
    virtual ~AbstractSecureExecutor() = default;

    explicit AbstractSecureExecutor(int width, int taskTag, int msgTagOffset) : _width(width), _taskTag(taskTag),
        _startMsgTag(msgTagOffset), _currentMsgTag(msgTagOffset) {
    }

    // secret sharing process
    virtual AbstractSecureExecutor *execute() = 0;

    virtual AbstractSecureExecutor *reconstruct(int clientRank) = 0;

protected:
    [[nodiscard]] int64_t ring(int64_t raw) const;

    [[nodiscard]] int buildTag(int msgTag) const;
};

#endif //MPC_PACKAGE_SECUREEXECUTOR_H
